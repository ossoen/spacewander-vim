snippet t "true"
true
endsnippet

snippet f "false"
false
endsnippet

snippet n "nil"
nil
endsnippet

snippet r "return"
return
endsnippet

snippet br "begin...rescue"
begin
  ${1:try}
rescue ${2:Exception}
  ${3:handle}
end
endsnippet

snippet res "rescue"
rescue ${1:Error}
  ${2:handle}
endsnippet


snippet re "require"
require '${1:module}'
endsnippet

snippet {} "hash"
{ ${1:key1} => ${2:value1}
  ${3:key2} => ${4:value2}}
endsnippet

snippet #! "#!/usr/bin/env ruby"
#!/usr/bin/env ruby
# encoding: UTF-8


endsnippet

snippet code "# encoding: UTF-8"
# encoding: UTF-8

endsnippet

snippet If "<command> if <expression>"
${1:command} if ${0:expression}
endsnippet

snippet Unless "<command> unless <expression>"
${1:command} unless ${0:expression}
endsnippet

snippet if "if <condition> ... end"
if ${1:condition}
	${2:# TODO}
end
endsnippet

snippet el "else"
else
  ${0:# TODO}
endsnippet

snippet ie "if <condition> ... else ... end"
if ${1:condition}
	${2:# TODO}
else
	${3:# TODO}
end
endsnippet

snippet ief "if <condition> ... elseif <condition> ... else ... end"
if ${1:condition}
	${2:# TODO}
elsif ${3:condition}
	${4:# TODO}
else
	${0:# TODO}
end
endsnippet

snippet unless "unless <condition> ... end"
unless ${1:condition}
	${0:# TODO}
end
endsnippet

snippet unlesse "unless <condition> ... else ... end"
unless ${1:condition}
	${2:# TODO}
else
	${0:# TODO}
end
endsnippet

snippet unlesee "unless <condition> ... elseif <condition> ... else ... end"
unless ${1:condition}
	${2:# TODO}
elsif ${3:condition}
	${4:# TODO}
else
	${0:# TODO}
end
endsnippet

snippet d "def <name>..."
def ${1:function_name}
	${0:# TODO}
end
endsnippet

snippet defi "def initialize ..."
def initialize${1: ${2:*args}}
	${0:# TODO}
end
endsnippet

snippet defr "def <name> ... rescue ..."
def ${1:function_name}${2: ${3:*args}}
	${4:# TODO}
rescue
	${0:# TODO}
end
endsnippet

snippet For "(<from>..<to>).each { |<i>| <block> }"
(${1:from}..${2:to}).each { |${3:i}| ${4:# TODO} }
endsnippet



snippet for "(<from>..<to>).each do |<i>| <block> end"
(${1:from}..${2:to}).each do |${3:i}|
	${0:# TODO}
end
endsnippet

snippet Each "<elements>.each { |<element>| <block> }"
${1:elements}.each { |${2:${1/s$//}}| ${3:# TODO} }
endsnippet

snippet each "<elements>.each do |<element>| <block> end"
${1:elements}.each do |${2:${1/s$//}}|
	${0:# TODO}
end
endsnippet

snippet do "do |<key>| ... end"
do |${1:args}|
	$0
end
endsnippet

snippet Do "do ... end"
do
	$0
end
endsnippet


snippet until "until <expression> ... end"
until ${1:expression}
	${0:# TODO}
end
endsnippet



snippet Until "begin ... end until <expression>"
begin
	${0:# TODO}
end until ${1:expression}
endsnippet



snippet wh "while <expression> ... end"
while ${1:expression}
	${0:# TODO}
end
endsnippet



snippet While "begin ... end while <expression>"
begin
	${0:# TODO}
end while ${1:expression}
endsnippet



snippet  ar "attr_reader :<attr_names>"
attr_reader :${0:attr_names}
endsnippet



snippet aw "attr_writer :<attr_names>"
attr_writer :${0:attr_names}
endsnippet



snippet aa "attr_accessor :<attr_names>"
attr_accessor :${0:attr_names}
endsnippet



snippet begin "begin ... rescue ... end"
begin
	${1:# TODO}
rescue
	${0:# TODO}
end
endsnippet



snippet begin "begin ... rescue ... else ... ensure ... end"
begin
	${1:# Raise exception}
rescue Exception => e
	puts e.message
	puts e.backtrace.inspect
	${2:# Rescue}
else
	${3:# other exception}
ensure
	${0:# always excute}
end
endsnippet



snippet rescue
rescue Exception => e
	puts e.message
	puts e.backtrace.inspect
	${0:# Rescue}
endsnippet



snippet "(case|sw(itch)?)" "case <variable> when <expression> ... end"
case ${1:variable}
when ${2:expression}
$0
end
endsnippet

snippet ca "case <variable> when <expression> ... end"
case ${1:variable}
  when ${2:expression}
  ${5:#do something...}
  when ${3:expression}
  ${6:#do something...}
  when ${4:expression}
  ${0:#do something...}
end
endsnippet

snippet when "when <expression>"
when ${1:expression}
  ${0:#do something...}
endsnippet

snippet alias "alias :<new_name> :<old_name>"
alias :${1:new_name} :${2:old_name}
endsnippet


snippet di "def initialize ... end end"
def initialize ${1:params}
  $0 
end
endsnippet

snippet c "class <class_name>"
class ${1:class_name}
  $0 
end
endsnippet



snippet m "module"
module ${1:module_name}
	$0
end
endsnippet



snippet ###
=begin
  $0
=end
endsnippet

snippet # "###"
# ${0:description}
# 
endsnippet

snippet ## "###"
# ${1:description}
# 
# @param [${3:type}] ${2:name} ${4:description}
#
# @api ${0:public}
endsnippet


snippet test "test"
test "${1:description}" do
  ${2:content}
end
endsnippet

snippet ae "assert_equal"
assert_equal ${1:exp}, ${2:act}
endsnippet

snippet ara "assert_raises"
assert_raises ${1:*exp}
endsnippet

snippet art "assert_respond_to"
assert_respond_to ${1:obj} ${2:meth}
endsnippet

snippet aid "assert_in_delta"
assert_in_delta ${1:exp} ${2:act} ${3:delta}
endsnippet

# vim: set ts=2 sw=2 expandtab:
