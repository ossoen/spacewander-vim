###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet #! "#!"
#! /usr/bin/env node


endsnippet

snippet re "require"
require('${1:module}')
endsnippet

snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element) {
  ${VISUAL}$0
}${10:,}
endsnippet

snippet .f "object method function_name"
${1:object}.${2:method} = function(${3:argument}) {
  $0
};
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:attribute}) {
  ${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet pro "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
  ${VISUAL}$0
};

endsnippet

snippet forb "for (...) {...} (faster)"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--) {
	${3:$1[$2]}${VISUAL}$0
}
endsnippet

snippet forr "for i in a..b"
for (var ${2:i} = ${1:a}; $2 < ${3:b}; $2++) {
  $0
}
endsnippet


snippet for "for (...) {...}"
for (var ${2:i} = 0; $2 < ${1:Things}.length; $2++) {
	${3:$1[$2]}${VISUAL}$0
}
endsnippet

snippet fori "for i in"
for (var ${2:i} in ${1:Things}) {
	${0}
}
endsnippet


snippet sw "switch"
switch (${1:expr}) {
	case ${2:caseOne}:
		${4:detail}
		break;
	case ${3:caseTwo}:
		${0:detail}
		break;
	default:
		break;
}
endsnippet

snippet ca "case"
case ${1:what}:
	${0}
	break;
endsnippet


snippet vf "var function_name"
var ${1:function_name} = function (${2:argument}) {
	${VISUAL}$0
};
endsnippet

snippet fun "function (fun)"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function (${1:argument}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet ief "if...else if"
if (${1:condition}) {
	${2://code}
}
else if (${3:condition}) {
	${4://code}
}
endsnippet

snippet e "else"
else {

}
endsnippet

snippet ei "elif"
else if (${1:condition}) {
  {2://code}
}
endsnippet

snippet ie "if ___ else"
if (${1:condition}) {
  ${2://code}
}
else {
	${3://code}
}
endsnippet

snippet if "if"
if (${1:condition}) {
	${VISUAL}$0
}
endsnippet

snippet u "undefined"
undefined
endsnippet

snippet n "null"
null
endsnippet

snippet fu "function"
function
endsnippet

snippet f "false" w
false
endsnippet

snippet t "true" w
true
endsnippet

snippet r "return"
return
endsnippet

snippet v "var"
var ${1:value}
endsnippet
snippet al "alert"
alert(${1});
endsnippet


snippet timeout "setTimeout function"
setTimeout(function() {
    ${VISUAL}$0
}${2:.bind(${3:this})}, ${1:10});
endsnippet

# Snippets for Console Debug Output

snippet cl "console.log"
console.log(${1:value});
endsnippet

snippet cw "console.warn"
console.warn(${1:value});
endsnippet

snippet ce "console.error"
console.error(${1:value});
endsnippet

snippet ca "console.assert"
console.assert(${1:assertion}, "${2:message}"});
endsnippet

snippet cgroup "console.group"
console.group("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet ctime "console.time"
console.time("${1:label}");
${VISUAL}$0
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timestamp"
console.timeStamp("${1:label}")
endsnippet

snippet ctrace "console.trace"
console.trace();
endsnippet

# AMD (Asynchronous Module Definition) snippets

snippet def "define an AMD module"
define(${1:optional_name, }[${2:'jquery'}], ${3:callback});
endsnippet

snippet req "require an AMD module"
require([${1:'dependencies'}], ${2:callback});
endsnippet

snippet try "try...catch..."
try {
	${1://code}
}
catch(e) {
	${2://code}
}
endsnippet

snippet /// "write jsDoc docstring"
/*
 * ${1:docstring}
 *
 * @param ${2:Argument Type} ${3:argument} - ${4:description}
 */
endsnippet

snippet wh "while"
while (${1:expr}) {
	${2:body}
}
endsnippet

# mocha should
snippet sh "should.to" w
should.be.
endsnippet

snippet she "should.to.equal" w
should.be.equal(${0:value});
endsnippet

# describe
snippet d "describe"
describe('${1:what}', function(){
  ${0}
});
endsnippet

snippet it "it"
it('${1:what}', function(){
  ${0}
});
endsnippet

# Node
snippet exp "module.exports"
module.exports = {
  ${1:func}: $1
};
endsnippet

snippet e: "exports function"
${1:func}: $1
endsnippet


# basic Class
snippet A "Array"
new Array(${1:num});
endsnippet

snippet JS "JSON.stringify" w
JSON.stringify(${1:argu})
endsnippet

snippet b "break"
break
endsnippet

snippet v[] "var a = []"
var ${1:var} = [];
endsnippet

snippet v{} "var a = {}"
var ${1:var} = {};
endsnippet

snippet vr "var a = require(x)"
var ${1:var} = require('${2:file}')
endsnippet


# vim:ft=snippets:
