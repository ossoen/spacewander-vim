snippet comm
(comment
	${1})
endsnippet

snippet condp
(condp ${1:pred} ${2:expr}
    ${3})
endsnippet

snippet cond "cond"
(cond 
  (${1:case1}) ${0:expr}
  (${2:case2})
  :else )
endsnippet

snippet d "def"
(def ${1})
endsnippet

snippet def
(def ${1})
endsnippet

snippet defm
(defmethod ${1:multifn} "${2:doc-string}" ${3:dispatch-val} [${4:args}]
    ${5})
endsnippet

snippet defmm
(defmulti ${1:name} "${2:doc-string}" ${3:dispatch-fn})
endsnippet

snippet defma
(defmacro ${1:name} "${2:doc-string}" ${3:dispatch-fn})
endsnippet

snippet dn "defn"
(defn ${1:name} [${3:arg-list}]
  ${4})
endsnippet

snippet defn
(defn ${1:name} [${3:arg-list}]
  ${4})
endsnippet

snippet defp
(defprotocol ${1:name}
  ${2})
endsnippet

snippet defr
(defrecord ${1:name} [${2:fields}]
  ${3:protocol}
  ${4})
endsnippet

snippet deft
(deftest ${1:name}
  (is (= ${2:assertion})))
  ${3})
endsnippet

snippet for "for"
(for [${1:seq}] ${2:expr})
endsnippet

snippet is
(is (= ${1} ${2}))
snippet defty
(deftype ${1:Name} [${2:fields}]
  ${3:Protocol}
  ${4})
endsnippet

snippet doseq
(doseq [${1:elem} ${2:coll}]
  ${3})
endsnippet

snippet fn
(fn [${1:arg-list}] ${2})
endsnippet

snippet if
(if ${1:test-expr}
  ${2:then-expr}
  ${3:else-expr})
endsnippet

snippet if-let 
(if-let [${1:result} ${2:test-expr}]
  (${3:then-expr} $1)
  (${4:else-expr}))
endsnippet

snippet imp
(:import [${1:package}])
& {:keys [${1:keys}] :or {${2:defaults}}}
endsnippet

snippet let
(let [${1:name}] ${2:expr})
endsnippet

snippet letfn
(letfn [(${1:name) [${2:args}] ${3})])
endsnippet

snippet map
(map ${1:func} ${2:coll})
endsnippet

snippet mapl
(map #(${1:lambda}) ${2:coll})
endsnippet

snippet met
(${1:name} [${2:this} ${3:args}]
  ${4})
endsnippet

snippet ns
(ns ${1:name}
  ${2})
endsnippet

snippet dotimes
(dotimes [${1:times}]
  ${2:expr})
endsnippet

snippet loop "loop"
(loop [${1:name}]
  ${2:expr})
endsnippet

snippet n "nil"
nil
endsnippet

snippet pmethod
(${1:name} [${2:this} ${3:args}])
endsnippet

snippet refer
(:refer-clojure :exclude [${1}])
endsnippet

snippet require
(:require [${1:namespace} :as [${2}]])
endsnippet

snippet use
(:use [${1:namespace} :only [${2}]])
endsnippet

snippet p
(println ${1})
endsnippet

snippet reduce
(reduce ${1:(fn [p n] ${3})} ${2})
endsnippet

snippet when
(when ${1:test} 
  ${2:body})
endsnippet

snippet when-let
(when-let [${1:result} ${2:test}]
  ${3:body})
endsnippet

snippet t "true"
true
endsnippet

snippet f "false"
false
endsnippet

# vim: set ts=4 sw=4 tabstop=2 shiftwidth=2 expandtab:
