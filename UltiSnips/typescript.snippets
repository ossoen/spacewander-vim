snippet #! "#!"
#!/usr/bin/env ts-node
$0
endsnippet

# Basic keyword
snippet l "let"
let $0
endsnippet

snippet a "any" w
any
endsnippet

snippet A "Array"
Array<$0>
endsnippet

snippet b "boolean" w
boolean
endsnippet

snippet n "number" w
number
endsnippet

snippet s "string" w
string
endsnippet

snippet f "false" w
false
endsnippet

snippet t "true" w
true
endsnippet

snippet r "return"
return $0
endsnippet

snippet v "void"
void
endsnippet

snippet c "class"
class ${1:Name} {
	$0
}
endsnippet

snippet cons "constructor"
constructor(${1:args}) {
	$0
}
endsnippet

snippet pu "public" w
public $0
endsnippet

snippet pr "private" w
private $0
endsnippet

snippet ro "readonly" w
readonly
endsnippet

snippet st "static"
static $0
endsnippet

snippet su "super"
super
endsnippet

snippet ex "extends"
extends
endsnippet

snippet ko "keyof"
keyof
endsnippet

snippet th "this" w
this
endsnippet

snippet i "interface"
interface ${1:Name} {
	$0
}
endsnippet

snippet im "implements"
implements $0
endsnippet

snippet fu "function"
function ${1:name}(${2:args})${3:: retType} {
	$0
}
endsnippet

snippet fun "function"
function
endsnippet

snippet e "enum"
enum ${1:Name} { $0 }
endsnippet

snippet C "const" w
const $0
endsnippet

snippet ep "export"
export $0
endsnippet

snippet ip "import"
import $0
endsnippet

snippet m "module"
module ${1:Name} {
	$0
}
endsnippet

snippet P "console.log"
console.log($0)
endsnippet

snippet if "if"
if (${1:cond}) {
	$0
}
endsnippet

snippet ie "if...else"
if (${1:cond}) {
	${2:body}
} else {
	$0
}
endsnippet

snippet iei "if...else if"
if (${1:cond}) {
	${3:body}
} else if (${2:cond}) {
	$0
}
endsnippet

snippet iee "if...else if...else"
if (${1:cond}) {
	${3:body}
} else if (${2:cond}) {
	${4:body}
} else {
	$0
}
endsnippet

snippet ef "else if..."
else if (${1:cond}) {
	$0
}
endsnippet

snippet wh "while"
while (${1:cond}) {
	$0
}
endsnippet

snippet for "for"
for (let ${1:e} of ${2:ary}) {
	$0
}
endsnippet

snippet forin "for ... in"
for (let ${1:e} in ${2:obj}) {
	$0
}
endsnippet

snippet forof "for ... of"
for (let ${1:e} of ${2:ary}) {
	$0
}
endsnippet

snippet for- "for (...) {...} (backward)"
for (let ${2:i} = ${1:Things.length - 1}; $2 >= 0; $2--) {
	$0
}
endsnippet

snippet for+ "for (...) {...} (forward)"
for (let ${2:i} = 0; $2 < ${1:Things.length}; $2++) {
	$0
}
endsnippet

snippet forr "for i in a..b"
for (let ${1:i} = ${2:a}; $1 < ${3:b}; $1++) {
	$0
}
endsnippet

snippet co "continue"
continue
endsnippet

snippet br "break"
break
endsnippet

snippet tr "throw"
throw new ${1:Error}($0)
endsnippet

snippet to "typeof"
typeof ${1:param} === "${2:type}"
endsnippet

snippet io "instanceof"
instanceof $0
endsnippet

snippet sw "switch"
switch (${1:expr}) {
	case ${2:caseOne}:
		${4:detail}
		break
	case ${3:caseTwo}:
		${0:detail}
		break
	default:
		break
}
endsnippet

snippet ca "case"
case ${1:what}:
	${0}
	break
endsnippet

snippet try "try...catch..."
try {
	${1://code}
}
catch(e) {
	${2://code}
}
endsnippet

snippet JS "JSON.stringify" w
JSON.stringify($0)
endsnippet

