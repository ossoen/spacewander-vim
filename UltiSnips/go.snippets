snippet pa
package ${1:main}

$0
endsnippet

snippet fu
func ${1}(${2}) ${3} {
    ${4}
}
endsnippet

snippet P
println($0)
endsnippet

snippet pr "fmt.Println"
fmt.Println(${1:sth})
endsnippet


snippet ts
type ${1} struct {
    ${2}
}
endsnippet

snippet ti
type ${1} interface {
    ${2}
}
endsnippet

snippet e "error"
error
endsnippet

snippet b "bool" w
bool
endsnippet

snippet c "chan" w
chan
endsnippet

snippet i "int" w
int
endsnippet

snippet t
true${1}
endsnippet

snippet f
false${1}
endsnippet

snippet r
return ${1}
endsnippet

snippet s "string" w
string
endsnippet

snippet by "byte" w
byte
endsnippet

snippet E "error" w
error
endsnippet

snippet im "import"
import (
	"${1}"
)
endsnippet

snippet ra "range"
range $0
endsnippet

snippet fr "for...range"
for ${2:arg} := range ${1:container} {
	$0
}
endsnippet

snippet fre "for...range, element only"
for _, ${2:arg} := range ${1:container} {
	$0
}
endsnippet

snippet if "if"
if ${1:exp} {
	$0
}
endsnippet

snippet m "make"
make(${1:ty})
endsnippet

snippet A "append" w
append(${1:con}, ${2:v})
endsnippet

snippet main "main"
func main() {
	$0
}
endsnippet

snippet v "var" w
var ${1:v} ${2:t}
endsnippet

snippet V "var"
var (
	$0
)
endsnippet

snippet C "const"
const (
	$0
)
endsnippet

snippet sel "select"
select {
case $1:
	$3
case $2:
	$4
}
endsnippet

snippet sw "switch"
switch ${1:exp} {
case ${2:type}:
	$0
}
endsnippet

snippet ca "case"
case $1:
	$2
endsnippet

snippet ie "if...else"
if ${1:exp} {
	${2:do}
} else {
	$0
}
endsnippet

snippet ief "if...else if...else"
if ${1:exp} {
	${3:do}
} else if ${2:exp2} {
	$0
} else {

}
endsnippet

snippet br "break"
break
endsnippet

snippet co "continue"
continue
endsnippet

snippet d "defer"
defer $0
endsnippet

snippet n "nil" w
nil
endsnippet

snippet /* "/* comment block */"
/*
$0
*/
endsnippet


snippet in "interface"
interface
endsnippet

snippet for "for"
for ${1:i} := 0; $1 < ${2:max}; $1++ {
	$0
}
endsnippet

snippet en "err != nil"
err != nil
endsnippet

snippet ine "if err == nil"
if err == nil {
	$0
}
endsnippet

snippet ien "if err != nil"
if err != nil {
	$0
}
endsnippet

# use testify to test
snippet an "assert nil"
assert.Nil(t, ${1:actual})
endsnippet

snippet ae "assert equal"
assert.Equal(t, ${1:expected}, ${2:actual})
endsnippet

snippet ane "assert not equal"
assert.NotEqual(t, ${1:expected}, ${2:actual})
endsnippet

snippet at "assert true"
assert.True(t, $0)
endsnippet

snippet af "assert false"
assert.False(t, $0)
endsnippet

snippet T "func Test"
func Test${1:Func}(t *testing.T) {
	$0
}
endsnippet

snippet TS "Test inside suite"
func (suite *${1:Test}Suite) Test${2:Func}() {
	$0
}
endsnippet

snippet Ex "func Example"
func Example${1:Func}() {
	$0
}
endsnippet
