# shortcut
snippet #! "luajit"
#!/usr/bin/env luajit

$0
endsnippet

snippet #!r "resty"
#!/usr/bin/env resty

$0
endsnippet

snippet p "print"
print($0)
endsnippet

snippet ty "type"
type($0)
endsnippet

snippet set "setmetatable"
setmetatable(${1:var}, ${2:table})
endsnippet

snippet get "getmetatable"
getmetatable(${1:var})
endsnippet

snippet re "require"
require "$0"
endsnippet

snippet cy "yield"
coroutine.yield($0)
endsnippet

snippet cc "create"
coroutine.create($0)
endsnippet

snippet cr "resume"
coroutine.resume($0)
endsnippet

# type
snippet l "local"
local $0
endsnippet

snippet e "end"
end
endsnippet

snippet f "false"
false
endsnippet

snippet t "true"
true
endsnippet

snippet n "nil"
nil
endsnippet

snippet s "self"
self
endsnippet

snippet S "self."
self.
endsnippet

# conditions
snippet br "break"
break
endsnippet

snippet co "continue"
continue
endsnippet

snippet wh "while"
while ${1:expr} do
	$0
end
endsnippet

snippet for "for"
for ${1:expr} do
	$0
end
endsnippet

snippet fi "iter numeric entry in table"
for ${1:i} = ${2:range} do
	$0
end
endsnippet

snippet fiw "iter whole numeric entry in table"
for ${1:i} = 1, #${2:seq} do
	$0
end
endsnippet

snippet fe "iter entry in table"
for ${1:k, v} in pairs(${2}) do
	$0
end
endsnippet

snippet fek "iter key in table"
for ${1:k}, _ in pairs(${2}) do
	$0
end
endsnippet

snippet fei "iter numeric entry in table"
for ${1:i} in ipairs(${2}) do
	$0
end
endsnippet

snippet rp "repeat"
repeat
	$0
until ${1:expr}
endsnippet

snippet if "if then"
if ${1:expr} then
	$0
end
endsnippet

snippet If "if then end"
if ${1:expr} then $0 end
endsnippet

snippet ie "if else"
if ${1:expr} then
	${2:sth}
else
	$0
end
endsnippet

snippet ief "if elseif"
if ${1:expr} then
	${3:sth}
elseif ${2:expr} then
	$0
end
endsnippet

snippet iee "if elseif else"
if ${1:expr} then
	${3:sth}
elseif ${2:expr} then
	${4:sth}
else
	$0
end
endsnippet

# function
snippet r "return"
return
endsnippet

snippet fu "function" w
function ${1}(${2:args})
	$0
end
endsnippet

snippet lf "local function"
local function ${1}(${2:args})
	$0
end
endsnippet

snippet M "method"
function _M${1}(${2:args})
	$0
end
endsnippet

snippet fun "function"
function
endsnippet

# test
snippet des "describe"
describe('${1:topic}', function()
	it('${2:feature}', function()
		$0
	end)
end)
endsnippet

snippet it "it does sth..."
it('${1:feature}', function()
	$0
end)
endsnippet

snippet a "assert"
assert($0)
endsnippet

snippet at "assert true"
assert.is_true($0)
endsnippet

snippet af "assert false"
assert.is_false($0)
endsnippet

snippet ai "assert is equal"
assert.is.equal($0)
endsnippet

snippet ae "assert equal"
assert.are.same($0)
endsnippet

snippet an "assert nil"
assert.is_nil($0)
endsnippet

# string
snippet sb "byte" w
string.byte(${1:s}$0)
endsnippet

snippet sf "find" w
string.find(${1:s}, ${2:pattern})
endsnippet

snippet sgm "gmatch" w
string.gmatch(${1:s}, ${2:pattern})
endsnippet

snippet sgs "gsub" w
string.gsub(${1:s}, ${2:pattern}, ${3:replace})
endsnippet

snippet sl "len" w
string.len($0)
endsnippet

snippet slo "lower" w
string.lower($0)
endsnippet

snippet sup "upper" w
string.upper($0)
endsnippet

snippet sm "match" w
string.match(${1:s}, ${2:pattern})
endsnippet

snippet sr "reverse" w
string.reverse($0)
endsnippet

snippet ss "sub" w
string.sub(${1:s}, ${2:i})
endsnippet

# table
snippet ti "insert"
table.insert(${1:table}, $0)
endsnippet

snippet tm "maxn" w
table.maxn(${1:table}, $0)
endsnippet

snippet tr "remove" w
table.remove(${1:table}, $0)
endsnippet

snippet ts "sort" w
table.sort(${1:table})
endsnippet

snippet tc "concat" w
table.concat(${1:table}, $0)
endsnippet

# openresty
snippet log "ngx.log"
ngx.log(${1:ngx.ERR}, $0)
endsnippet

# others
snippet dump "dump table"
local dump = require('pl.pretty').dump; dump($0)
endsnippet

# for work
snippet ft "tb test"
function tb:test_${1:case}()
	$0
end

endsnippet

