global !p
import vim

# Tests for the existence of a variable declared by Vim's filetype detection
# suggesting the type of shell script of the current file
def testShell(scope, shell):
    return vim.eval("exists('" + scope + ":is_" + shell + "')")

# Loops over the possible variables, checking for global variables
# first since they indicate an override by the user.
def getShell():
    for scope in ["g", "b"]:
        for shell in ["bash", "posix", "sh", "kornshell"]:
            if testShell(scope, shell) == "1":
                if shell == "kornshell":
                    return "ksh"
                if shell == "posix":
                    return "bash"
                return shell
    return "sh"
endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet #!
`!p snip.rv = '#!/usr/bin/env ' + "bash" + "\n\n" `
endsnippet

snippet temp "Tempfile"
${1:TMPFILE}="$(mktemp -t ${2:`!p
snip.rv = re.sub(r'[^a-zA-Z]', '_', snip.fn) or "untitled"
`})"
${3:${4/(.+)/trap "/}${4:rm -f '$${1/.*\s//}'}${4/(.+)/" 0               # EXIT\n/}${5/(.+)/trap "/}${5:rm -f '$${1/.*\s//}'; exit 1}${5/(.+)/" 2       # INT\n/}${6/(.+)/trap "/}${6:rm -f '$${1/.*\s//}'; exit 1}${6/(.+)/" 1 15    # HUP TERM\n/}}

endsnippet

snippet f "false"
false
endsnippet

snippet t "true"
true
endsnippet

snippet re "read -p"
read -p "${1:what?}"
endsnippet

snippet e "echo"
echo ${1:what?}
endsnippet

snippet ee "echo to stderr"
>&2 echo ${1:what}
endsnippet

snippet p "printf"
printf
endsnippet

snippet ca "case .. esac (case)"
case ${1:word} in
${2:pattern} )
	$0;;
esac
endsnippet

snippet ie "if...else"
if [ ${1:condition} ]
then
	${2:#statements}
else
	${0:#statements}
fi
endsnippet

snippet el "else"
else
	${0:#statements}
endsnippet

snippet ief "elif .. (elif)"
if [ ${1:condition} ]
then
	${2:#statements}
elif [ ${3:condition} ]
then
	${4:#statements}
else
	${0:#statements}
fi
endsnippet

snippet for "for ... done (for)"
for (( i = 0; i < ${1:10}; i++ ))
do
	${0:#statements}
done
endsnippet

snippet forin "for ... in ... done (forin)"
for ${1:i}${2/.+/ in /}${2:words}; 
do
	${0:#statements}
done
endsnippet

snippet if "if ... then (if)"
if [ ${1:condition} ]
then
	${0:#statements}
fi
endsnippet

snippet until "until ... (done)"
until ${2:[[ ${1:condition} ]]}; do
	${0:#statements}
done
endsnippet

snippet while "while ... (done)"
while [${2:[ ${1:condition} ]}]; do
	${0:#statements}
done
endsnippet

# vim:ft=snippets:
# for function#
snippet fun "function"
${1:fname}() {
	${0:#code}
}
endsnippet

snippet r "return"
return ${1}
endsnippet

snippet argc "test argc"
if [[ $# -gt 0 ]]
then
	${1}
else
	$0
fi
endsnippet

snippet getopt "get options"
while [ "\$1" != "" ]; do
	case \$1 in
		-h | --help )
			exit 1
			;;
		${1} )
			;;
		* )
			$0
			;;
	esac
	shift
done
endsnippet

