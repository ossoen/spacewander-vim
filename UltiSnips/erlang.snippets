#keyword
snippet e "end"
end
endsnippet

snippet t "true"
true
endsnippet

snippet f "false"
false
endsnippet

snippet v "void"
void
endsnippet

snippet s "self" w
self()
endsnippet

snippet c "catch"
catch $0
endsnippet

snippet wh "when"
when $0
endsnippet

snippet af "after"
after
endsnippet

# function
snippet -d "-define"
-define(${1:SERVER}, ${2:?MODULE}).
$0
endsnippet

snippet -e "-export()."
-export([$1]).
$0
endsnippet

snippet -i "-import()"
-import(${1:Module}, [${2:Functions}]).
$0
endsnippet

snippet -il "-include_lib"
-include_lib("$1").
$0
endsnippet

snippet -b "-behaviour"
-behaviour(${1:gen_server}).
$0
endsnippet

snippet -m "-module()."
-module(${1:`!p snip.rv =snip.basename`}).
$0
endsnippet

snippet -r "-record()"
-record(${1:name}, {${2:fileds}}).
$0
endsnippet

# Functions
snippet l "length"
length($0)
endsnippet

snippet sp "spawn"
spawn($0)
endsnippet

snippet sl "spawn_link"
spawn_link($0)
endsnippet

snippet reg "register"
register(${1:name}, ${2:pidOrPort})
endsnippet

snippet mo "monitor"
monitor(${1:process}, ${2:Pid})
endsnippet

snippet pf "process_flag"
process_flag(trap_exit, ${1:true})
endsnippet

## conditions

snippet th "throw"
throw
endsnippet

snippet ex "exit"
exit
endsnippet

snippet er "error"
error
endsnippet

# construct
snippet ca "case"
case ${1} of
	${2:pattern1} -> ${4:expr};
	${3:pattern2} -> $0
end
endsnippet

snippet if "if"
if
	${1:pattern1} -> ${3:expr};
	${2:pattern2} -> $0
end
endsnippet

snippet tc "try catch"
try
	${0:sth}
catch
	${2:pattern} -> ${3:handler}
end.
endsnippet

snippet tca "try catch after"
try $1 of
	${0:sth}
catch
	${2:pattern} -> ${3:handler}
after
	${4:after all}
endsnippet

snippet fu "fun" w
fun(${1:args}) -> $2 end$0
endsnippet

snippet re "receive"
receive
	$0
end
endsnippet

# debug
snippet p "erlang style print debug"
io:format("${1:~p}~n"${2:, Value})
endsnippet

## others
## need to use i option to trigger it after keyword
snippet ?M "?MODULE" i
?MODULE
endsnippet

## Eunit
snippet ?a "?assert"
?assert($0)
endsnippet

snippet ?ae "?assert equal"
?assert(${1:expr} =:= ${2:value})
endsnippet

snippet ?ane "?assert not equal"
?assert(${1:expr} =/= ${2:value})
endsnippet

